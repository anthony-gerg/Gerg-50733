{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "6c693a0b-8009-4b4c-bec5-03a694642160",
   "metadata": {},
   "source": [
    "## Homework 2\n",
    "### Due: Thursday Feb. 13\n",
    "\n",
    "**Integer vs floating point number**\n",
    "\n",
    "Write a program to calculate and print the factorial of a\n",
    "number.  If you wish you can base your program on the\n",
    "user-defined function for factorial given in Section 2.6, but write your\n",
    "program so that it calculates the factorial using *integer*\n",
    "variables, not floating-point ones.  Use your program to calculate the\n",
    "factorial of 200.\n",
    "\n",
    "Now modify your program to use floating-point variables instead and again\n",
    "calculate the factorial of 200.  What do you find?  Explain.\n",
    "\n",
    "(20 points)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "de7fed8f-325f-4eab-ab18-1e59d1d6b428",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "59.0625\n"
     ]
    }
   ],
   "source": [
    "def fact(n):\n",
    "    value = 1\n",
    "    for i in range(1,n+1):\n",
    "        value *= i\n",
    "    return value\n",
    "\n",
    "\n",
    "def fact(n):\n",
    "    value = 1\n",
    "    while n >= 1.0:\n",
    "        value *= n\n",
    "        n = n-1\n",
    "    return value\n",
    "print(fact(4.5))"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "1e9a5155-daa8-4809-8e6a-e5d4ab7c270d",
   "metadata": {},
   "source": [
    "**A Simple Derivative**\n",
    "\n",
    "Suppose we have a function $f(x)$ and we want to\n",
    "calculate its derivative at a point $x$.  We can do that with pencil and\n",
    "paper if we know the mathematical form of the function, or we can do it on\n",
    "the computer by making use of the definition of the derivative:\n",
    "\n",
    "\n",
    "${d f\\over d x} = \\lim_{\\delta\\to0} {f(x+\\delta)-f(x)\\over\\delta}.$\n",
    "\n",
    "\n",
    "On the computer we can't actually take the limit as $\\delta$ goes to\n",
    "zero, but we can get a reasonable approximation just by making $\\delta$\n",
    "small.\n",
    "- Write a program that defines a function *f(x)* returning the\n",
    "  value $x(x-1)$, then calculates the derivative of the function at the\n",
    "  point $x=1$ using the formula above with $\\delta=10^{-2}$.  Calculate\n",
    "  the true value of the same derivative analytically and compare with the\n",
    "  answer your program gives.  The two will not agree perfectly.  Why not?\n",
    "- Repeat the calculation for $\\delta=10^{-4}$, $10^{-6}$, $10^{-8}$,\n",
    "  $10^{-10}$, $10^{-12}$, and $10^{-14}$.  You should see that the accuracy\n",
    "  of the calculation initially gets better as $\\delta$ gets smaller, but\n",
    "  then gets worse again.  Why is this?\n",
    "\n",
    "(20 points)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "84528686-9eb8-4446-81db-1a6dc4a26a30",
   "metadata": {},
   "outputs": [
    {
     "ename": "TypeError",
     "evalue": "'float' object cannot be interpreted as an integer",
     "output_type": "error",
     "traceback": [
      "\u001b[1;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[1;31mTypeError\u001b[0m                                 Traceback (most recent call last)",
      "Cell \u001b[1;32mIn[15], line 8\u001b[0m\n\u001b[0;32m      5\u001b[0m \u001b[38;5;28;01mdef\u001b[39;00m \u001b[38;5;21mforward_diff\u001b[39m(x,n):\n\u001b[0;32m      6\u001b[0m     \u001b[38;5;28;01mreturn\u001b[39;00m [n,(func(x\u001b[38;5;241m+\u001b[39mn)\u001b[38;5;241m-\u001b[39mfunc(x))\u001b[38;5;241m/\u001b[39mn]\n\u001b[1;32m----> 8\u001b[0m list_of_forwards \u001b[38;5;241m=\u001b[39m [forward_diff \u001b[38;5;28;01mfor\u001b[39;00m i \u001b[38;5;129;01min\u001b[39;00m \u001b[38;5;28mrange\u001b[39m(\u001b[38;5;241m1e-14\u001b[39m,\u001b[38;5;241m1e-2\u001b[39m,\u001b[38;5;241m1e-2\u001b[39m)] \n\u001b[0;32m      9\u001b[0m \u001b[38;5;28mprint\u001b[39m(\u001b[38;5;124mf\u001b[39m\u001b[38;5;124m'\u001b[39m\u001b[38;5;124mForward \u001b[39m\u001b[38;5;132;01m{\u001b[39;00mforward_diff(\u001b[38;5;241m1\u001b[39m,\u001b[38;5;241m0.01\u001b[39m)[\u001b[38;5;241m1\u001b[39m]\u001b[38;5;132;01m}\u001b[39;00m\u001b[38;5;124m with step size \u001b[39m\u001b[38;5;132;01m{\u001b[39;00m\u001b[38;5;241m0.01\u001b[39m\u001b[38;5;132;01m}\u001b[39;00m\u001b[38;5;124m'\u001b[39m)\n\u001b[0;32m     10\u001b[0m \u001b[38;5;28mprint\u001b[39m(\u001b[38;5;124mf\u001b[39m\u001b[38;5;124m'\u001b[39m\u001b[38;5;124mForward \u001b[39m\u001b[38;5;132;01m{\u001b[39;00mforward_diff(\u001b[38;5;241m1\u001b[39m,\u001b[38;5;241m0.0001\u001b[39m)[\u001b[38;5;241m1\u001b[39m]\u001b[38;5;132;01m}\u001b[39;00m\u001b[38;5;124m with step size \u001b[39m\u001b[38;5;132;01m{\u001b[39;00m\u001b[38;5;241m1e-4\u001b[39m\u001b[38;5;132;01m}\u001b[39;00m\u001b[38;5;124m'\u001b[39m)\n",
      "\u001b[1;31mTypeError\u001b[0m: 'float' object cannot be interpreted as an integer"
     ]
    }
   ],
   "source": [
    "import matplotlib.pyplot as plt\n",
    "def func(x):\n",
    "    return x*(x-1)\n",
    "\n",
    "def forward_diff(x,n):\n",
    "    return [n,(func(x+n)-func(x))/n]\n",
    "\n",
    "print(f'Forward {forward_diff(1,0.01)[1]} with step size {0.01}')\n",
    "print(f'Forward {forward_diff(1,0.0001)[1]} with step size {1e-4}')\n",
    "print(f'Forward {forward_diff(1,1e-6)[1]} with step size {1e-6}')\n",
    "print(f'Forward {forward_diff(1,1e-8)[1]} with step size {1e-8}')\n",
    "print(f'Forward {forward_diff(1,1e-10)[1]} with step size {1e-10}')\n",
    "print(f'Forward {forward_diff(1,1e-12)[1]} with step size {1e-12}')\n",
    "print(f'Forward {forward_diff(1,1e-14)[1]} with step size {1e-14}')\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "1a06196d",
   "metadata": {},
   "source": [
    "So this makes sense, and intuition tells me this is much like 'overfitting'. As we approach closer and closer to our point, we start working with veryyy precise numbers, which computers will struggle with. Notice that it gets worse around 0.0000000001 and 0.000000000001, so, in our function we would have 1.0000000001*(0.0000000001), which due to floating point precision, will struggle to correct data. This is shown more with the next value, where we actually get below 1, which doesn't make mathematical sense."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "ebb2e1bb-74fa-4897-9d4d-8ba74bfe1ad2",
   "metadata": {},
   "source": [
    "### Simpson's Rule\n",
    "\n",
    "- Write a program to calculate an approximate value for the integral $\\int_{0}^{2} ( x^4 - 2x + 1)dx$ from Example 5.1 in the book, but using Simpson's rule with 10 slices instead of the trapezoid rule. You may be able to modify your code from the trapezoid rule to complete this task. Compare your result to the known correct value of 4.4. What is the fractional error on your calculation?\n",
    "\n",
    "- Copy your code and modify it to use one hundred slices, then one thousand. Note the improvement in the result and compare to the results from the trapezoid rule.\n",
    "\n",
    "(30 points)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "id": "d8370bf3-7d95-442e-8d4d-b3636a60e6e7",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Simpsons Rule for a step size of 10 for our function is equal to 3.4734933333333338\n",
      "Simpsons Rule for a step size of 100 for our function is equal to 4.327844661333334\n",
      "Simpsons Rule for a step size of 1000 for our function is equal to 4.393275050063254\n",
      "Not bad, compared to trapezoid it approaches the correct answer quicker, and is more accuarate at the same step size.\n"
     ]
    }
   ],
   "source": [
    "import numpy as np\n",
    "\n",
    "def polynomial(x):\n",
    "    return (x**4 - 2*x + 1) \n",
    "\n",
    "def simpsons(func, start, stop, N_step):\n",
    "    time_step = (stop-start)/N_step\n",
    "    integrand_value = 0\n",
    "    start_value = ((func(start)))\n",
    "    end_value = ((func(stop)))\n",
    "    list_of_y_vals = []\n",
    "    for i in range(N_step):\n",
    "        if i != N_step-1:\n",
    "            step_x_value = start + i*time_step\n",
    "            incrementing = func(step_x_value)\n",
    "            integrand_value += incrementing\n",
    "        list_of_y_vals.append(incrementing)\n",
    "    list_of_y_vals = np.array(list_of_y_vals)\n",
    "    odd_vals = list_of_y_vals[0::2]\n",
    "    even_vals = list_of_y_vals[1::2]\n",
    "    return (1/3)*time_step*(start_value+end_value+(4*sum(odd_vals))+(2*sum(even_vals)))\n",
    "\n",
    "print(f'Simpsons Rule for a step size of 10 for our function is equal to {simpsons(polynomial,0,2,10)}')\n",
    "print(f'Simpsons Rule for a step size of 100 for our function is equal to {simpsons(polynomial,0,2,100)}')\n",
    "print(f'Simpsons Rule for a step size of 1000 for our function is equal to {simpsons(polynomial,0,2,1000)}')\n",
    "print(f'Not bad, compared to trapezoid it approaches the correct answer quicker, and is more accuarate at the same step size.')\n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "4c080cd1-540e-4ab2-a0d6-3372d1899b4f",
   "metadata": {},
   "source": [
    "### An Integral With No Analytic Solution\n",
    "\n",
    "Consider the integral\n",
    "\n",
    "$$ E(x) = \\int_{0}^{x} \\exp{-t^2} dt$$\n",
    "\n",
    "- Write a program to calculate $E(x)$ for values of x from 0 to 3 in steps of 0.1. Choose for yourself what method you will use for performing the integral and a suitable number of slices.\n",
    "\n",
    "- When you are convinced your program is working, extend it further to make a graph of E(x) as a function of x.\n",
    "\n",
    "(30 points)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 43,
   "id": "27aaf5cb-8c02-4c8a-affe-d7d67c969b59",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Value of our energy as we approach infinity and negative infinity, a well known value of a gaussian 1.772453850905511\n",
      "\n",
      "Set of x_values we will be using as bounds [0.  0.1 0.2 0.3 0.4 0.5 0.6 0.7 0.8 0.9 1.  1.1 1.2 1.3 1.4 1.5 1.6 1.7\n",
      " 1.8 1.9 2.  2.1 2.2 2.3 2.4 2.5 2.6 2.7 2.8 2.9]\n",
      "Energy values spanning our defined x values [0.         0.09973466 0.19750099 0.29144651 0.37993927 0.4616513\n",
      " 0.53561414 0.60124293 0.65832952 0.70700838 0.74770187 0.78105249\n",
      " 0.8078504  0.82896344 0.84527537 0.85763605 0.86682532 0.87353038\n",
      " 0.87833537 0.88172066 0.88406933 0.88567805 0.88677031 0.88751001\n",
      " 0.88801427 0.8883647  0.88861676 0.88880728 0.88896009 0.88909029]\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "Text(0.5, 1.0, 'Energy(x) over x')"
      ]
     },
     "execution_count": 43,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "import numpy as np\n",
    "#I'm using Simpson's here because it is much simplier to use, as well as it is objectively better then the trapezoid rule\n",
    "def exponential(x):\n",
    "    return np.exp(-(x**2))\n",
    "\n",
    "def simpsons(func, start, stop, N_step):\n",
    "    time_step = (stop-start)/N_step\n",
    "    integrand_value = 0\n",
    "    start_value = ((func(start)))\n",
    "    end_value = ((func(stop)))\n",
    "    list_of_y_vals = []\n",
    "    for i in range(N_step):\n",
    "        if i != N_step-1:\n",
    "            step_x_value = start + i*time_step\n",
    "            incrementing = func(step_x_value)\n",
    "            integrand_value += incrementing\n",
    "        list_of_y_vals.append(incrementing)\n",
    "    list_of_y_vals = np.array(list_of_y_vals)\n",
    "    odd_vals = list_of_y_vals[0::2]\n",
    "    even_vals = list_of_y_vals[1::2]\n",
    "    return (1/3)*time_step*(start_value+end_value+(4*sum(odd_vals))+(2*sum(even_vals)))\n",
    "\n",
    "print(f'Value of our energy as we approach infinity and negative infinity, a well known value of a gaussian {simpsons(exponential,-1000,1000,10000)}')\n",
    "print('')\n",
    "x_values = np.arange(0, 3, 0.1)\n",
    "Energy = np.array([simpsons(exponential,0,i,1000) for i in x])\n",
    "print(f'Set of x_values we will be using as bounds {x_values}')\n",
    "print(f'Energy values spanning our defined x values {Energy}')\n",
    "\n",
    "plt.plot(x_values,Energy)\n",
    "plt.xlabel('x')\n",
    "plt.ylabel('Energy Values')\n",
    "plt.title('Energy(x) over x')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "d74c669b",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "base",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.4"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
